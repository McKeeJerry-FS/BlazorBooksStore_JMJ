@inject IJSRuntime JSRuntime
@inject AppStateContainer AppStateContainer
@implements IDisposable

<nav class="navbar navbar-expand-lg navbar-light bg-light">
    <div class="container-fluid">
        <a class="navbar-brand" href="">BooksStore</a>
        <button class="navbar-toggler" type="button"
            data-bs-toggle="collapse"
            data-bs-target="#navbarNav" 
            aria-controls="navbarNav"
            aria-expanded="false"
            aria-label="Toggle navigation">
                <span class="navbar-toggler-icon"></span>
        </button>
        <div class="collapse navbar-collapse" id="navbarNav">
            <ul class="navbar-nav">
                <li class="nav-item">
                    <NavLink class="nav-link" href="/">Home</NavLink>
                </li>
                <li class="nav-item">
                    <NavLink class="nav-link" href="/Counter">Counter @(currentCount)</NavLink>
                </li>
                <li class="nav-item">
                    <NavLink class="nav-link" href="/Weather">Weather</NavLink>
                </li>
                <AuthorizeView>
                    <Authorized>
                        @if(context.User.IsInRole("Admin"))
                        {
                            <li class="nav-item">
                                <NavLink class="nav-link" href="/Book/Form">Add Book</NavLink>
                            </li>
                        }
                    </Authorized>
                </AuthorizeView>
            </ul>
        </div>
        <div class="d-flex">
            <LoginDisplay />
            <a class="btn btn-outline-primary ms-2">Register</a>
        </div>
    </div>
</nav>

@code{
    private int currentCount = 0;
    private void OnCounterChanged(int newCounter)
    {
        currentCount = newCounter;
        StateHasChanged(); // Refresh the component to reflect the new count
    }

    protected override void OnInitialized()
    {
        AppStateContainer.OnCounterChanged += OnCounterChanged;
    }

    private async Task ShowAlertAsync(){
        await JSRuntime.InvokeVoidAsync("showAlert", "Unknown User");
    } 

    public void Dispose()
    {
        AppStateContainer.OnCounterChanged -= OnCounterChanged;
    }
}