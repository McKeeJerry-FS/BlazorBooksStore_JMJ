@using System.Security.Claims
@using Blazored.LocalStorage
@inject ILocalStorageService LocalStorage
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager Navigation

<AuthorizeView>
    <Authorized>
        <div class="d-flex align-items-center">
            <p class="my-0">
                Hello @context.User.FindFirst(ClaimTypes.GivenName)?.Value
            </p>
            <button class="btn btn-danger mx-2" @onclick="LogoutAsync">Logout</button>
        </div>
    </Authorized>
    <NotAuthorized>
        <a href="/authentication/login" class="btn btn-outline-primary">Login</a>
    </NotAuthorized>
</AuthorizeView>

@code {
    private async Task LogoutAsync()
    {
        await LocalStorage.RemoveItemAsync("access_token");
        await AuthenticationStateProvider.GetAuthenticationStateAsync();
        Navigation.NavigateTo("/"); // Redirect to home page after logout
        StateHasChanged(); // Refresh the component to reflect the logout state
    }
}
