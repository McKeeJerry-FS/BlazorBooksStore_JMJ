@page "/book/Form"
@using BlazorBooksStore.Blazor.Components
@using Blazored.LocalStorage
@inject ILocalStorageService LocalStorage
@inject HttpClient Http
@inject NavigationManager Navigation
@inject BooksService BooksService
@implements IDisposable

<PageTitle>BooksStore | Add a New Book</PageTitle>



<div class="row">
    <div class="col-6">
        <h2>Add a New Book</h2>
        <EditForm Model="_book" OnValidSubmit="HandleBookFormSubmission">
            <DataAnnotationsValidator />
            @* <ValidationSummary /> *@
            <div class="form-group mt-1">
                <label>Title</label>
                @* <input type="text" @bind-value="@_book.Title" class="form-control" placeholder="Title" /> *@
                <InputText @bind-Value="@_book.Title" class="form-control" />
                <ValidationMessage For="@(() => _book.Title)" />
            </div>
            <div class="form-group mt-1">
                <label>Description</label>
                @* <input type="text" @bind-value="@_book.Description" class="form-control" placeholder="Description" /> *@
                @* <InputTextArea @bind-Value="@_book.Description" class="form-control" /> *@
                <BlazorSimpleMDE @ref="_simpleMde" />
                <ValidationMessage For="@(() => _book.Description)" />
            </div>
            <div class="form-group mt-1">
                <label>Number of Pages</label>
                @* <input type="number" @bind-value="@_book.PagesCount" class="form-control" placeholder="Number of pages" /> *@
                <InputNumber @bind-Value="@_book.PagesCount" class="form-control" />
                <ValidationMessage For="@(() => _book.PagesCount)" />
            </div>
            <div class="form-group mt-1">
                <label>Author</label>
                @* <input type="text" @bind-value="@_book.Author" class="form-control" placeholder="Author" /> *@
                <InputText @bind-Value="@_book.Author" class="form-control" />
                <ValidationMessage For="@(() => _book.Author)" />
            </div>
            <div class="form-group mt-1">
                <label>Price</label>
                @* <input type="number" @bind-value="@_book.Price" class="form-control" placeholder="Price" /> *@
                <InputNumber TValue="decimal" @bind-Value="@_book.Price" class="form-control" />
                <ValidationMessage For="@(() => _book.Price)" />
            </div>
            
            <hr />
            <div class="form-group mt-1">
                <BlazorBooksStore.Blazor.Components.InputTime @bind-Value="_time" class="form-control" />
                <p>Selected time is @_time</p>
            </div>
            @* <div class="form-group mt-1">
                <label>Format:</label>
                <InputRadioGroup TValue="BookFormat" @bind-Value="_book.Format" class="form-control">
                    <InputRadio TValue="BookFormat" Value="BookFormat.Paperback" /> Paperback
                    <InputRadio TValue="BookFormat" Value="BookFormat.Hardcover" /> Hardcover
                    <InputRadio TValue="BookFormat" Value="BookFormat.EBook" /> EBook
                </InputRadioGroup>
            </div> *@
            <div class="form-group mt-1">
                <input type="submit" class="btn btn-success" value="Save" />
                <input type="reset" class="btn btn-secondary" value="Reset" />
            </div>
        </EditForm>
    </div>
</div>

@code {
    private SubmitBook _book = new();
    private TimeOnly _time = new TimeOnly(12, 30, 0);
    private BookFormat _bookFormat = BookFormat.Paperback;
    private System.Timers.Timer _timer = new();

    private BlazorSimpleMDE? _simpleMde;

    protected async override Task OnInitializedAsync(){
        SetupTimer();
        await CheckSavedStateAsync();
    }

    private async void HandleBookFormSubmission()
    {
        if (_simpleMde != null)
        {
            _book.Description = await _simpleMde.GetEditorValueAsync();
        }
        await BooksService.AddBookAsync(_book);
        await ClearSavedStateAsync();
        Navigation.NavigateTo("/");

    }

    private async Task SaveFormStateAsync() {
        _book.Description = await _simpleMde.GetEditorValueAsync();
        await LocalStorage.SetItemAsync("book", _book);
    }

    private async Task CheckSavedStateAsync() {
        if(await LocalStorage.ContainKeyAsync("book")){
            _book = await LocalStorage.GetItemAsync<SubmitBook>("book") ?? new SubmitBook();
        }
    }

    private async Task ClearSavedStateAsync () {
        await LocalStorage.RemoveItemAsync("book");
    }

    private void SetupTimer() {
        var second = 1000;
        _timer.Interval = 10 * second;
        _timer.Elapsed += async (sender, e) => {
            await SaveFormStateAsync();
        };
        _timer.Start();
    }
    
    public void Dispose(){
        _timer.Stop();
        _timer.Dispose();
    }

}
