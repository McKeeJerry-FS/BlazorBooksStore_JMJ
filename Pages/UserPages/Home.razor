@page "/"
@using Microsoft.AspNetCore.Components.WebAssembly.Hosting
@using Blazored.LocalStorage
@inject IConfiguration Configuration
@inject IBooksService BooksService
@inject IWebAssemblyHostEnvironment Host
@inject NavigationManager Navigation
@inject IJSRuntime JSRuntime
@inject HttpClient HttpClient
@implements IDisposable

<PageTitle>Home | Page @PageNumber</PageTitle>
@layout UserLayout

<h1>Welcome to the BooksStore</h1>

<h3>Available Books: </h3>
<div style="display:flex;">
    @foreach (var book in _books)
    {
        <BookCard Book="book" OnAddToCartClicked="AddToCart"/>
    }
</div>

<hr />

<h3 class="mt-3">My Cart: </h3>
<DataListView TItemType="Book" Items="_books" ColumnCount="4">
    <ItemTemplate>
        <BookCard Book="@context" OnAddToCartClicked="AddToCart" WithButton="false" />
    </ItemTemplate>
</DataListView>
<div class="mt-3">
    <button class="btn btn-primary" @onclick="() => GoToPage(1)">1</button>
    <button class="btn btn-primary" @onclick="() => GoToPage(2)">2</button>
    <button class="btn btn-primary" @onclick="() => GoToPage(3)">3</button>
</div>



@* <p>Api Url: @Configuration["ApiUrl"]</p> *@

@if (!Host.IsDevelopment())
{
    <p>Welcome to Production Environment!!</p>   
}


<ModalPopup Title="Hi" IsOpen="@_IsWelcomeModalOpen" OnCloseClicked="() => _IsWelcomeModalOpen = false">
    <ChildContent>
        <p>
            Welcome to our Books Store. Here you will find a huge
            collection of books to help you build your career input
            software development. Enjoy!
        </p>
    </ChildContent>
    <FooterContent>
        <button class="btn btn-primary" @onclick="() => _IsWelcomeModalOpen = false">Discover It!</button>
    </FooterContent>
</ModalPopup>




@code{
    private List<Book> _books = new List<Book>();
    private List<Book> _booksCart = new List<Book>();

    private bool _IsWelcomeModalOpen = true;

    [CascadingParameter]
    public Task<AuthenticationState>? AuthenticationState { get; set; }

    [Parameter]
    [SupplyParameterFromQuery(Name = "pageNumber")]
    public int PageNumber { get; set; } = 1;

    protected override async Task OnInitializedAsync()
    {
        _books = await BooksService.GetAllBooksAsync();
        //_books = await GetBooksAsync() ?? new List<Book>();
        Navigation.LocationChanged += Navigation_LocationChanged;

        var module = await JSRuntime.InvokeAsync<IJSObjectReference>("import", "/scripts.js");
        var randomBook = await module.InvokeAsync<Book>("getRandomBook");
        var authState = await AuthenticationState;
        if (authState.User.Identity.IsAuthenticated)
        {
            //Execute logic if the user is authenticated
        }
    }

   

    protected override void OnParametersSet()
    {
        if(PageNumber <= 0){
            PageNumber = 1; // Ensure PageNumber is always positive
        }
    }

    private void AddToCart(Book selectedBook)
    {
        _booksCart.Add(selectedBook);
        StateHasChanged();
    }

    public void Dispose()
    {
        Navigation.LocationChanged -= Navigation_LocationChanged;
    }

    private Book _firstBook = new Book
    {
        Title = "Mastering Blazor WebAssembly",
        AuthorName = "John Smith",
        PublishingDate = new DateTime(2022,08,01)
    };

    private void Navigation_LocationChanged(object? sender, Microsoft.AspNetCore.Components.Routing.LocationChangedEventArgs e)
    {
        Console.WriteLine($"The location changed to {e.Location}");
    }

    private void GoToPage(int pageNumber)
    {
        Navigation.NavigateTo($"/?pageNumber={pageNumber}");
        //TODO: Logic to fetch books by the new page number
    }


    
}
