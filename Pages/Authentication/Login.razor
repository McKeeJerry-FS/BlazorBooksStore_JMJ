@page "/authentication/login"
@layout UserLayout
@using BlazorBooksStore.Exceptions
@using Blazored.LocalStorage
@inject AuthenticationStateProvider AuthStateProvider
@inject ILocalStorageService LocalStorage
@inject IAuthenticationService AuthService
@inject NavigationManager Navigation
<PageTitle>Blazor BooksStore | Login</PageTitle>

<h2>Welcome to Blazor BooksStore</h2>
<div class="row">
    <div class="col-sm-12 col-md-4">
        <EditForm Model="_model" OnValidSubmit="SubmitLoginFormAsync">
            <DataAnnotationsValidator />
            <div class="mb-3">
                <label>Username</label>
                <InputText @bind-Value="_model.Username" 
                           class="form-control" 
                           placeholder="Username" 
                           />
                <ValidationMessage For="@(() => _model.Username)" />
            </div>
            <div class="mb-3">
                <label>Password</label>
                <InputText @bind-Value="_model.Password" 
                           type="password" 
                           class="form-control" 
                           placeholder="Password" 
                           />
                <ValidationMessage For="@(() => _model.Password)" />
            </div>
            <button type="submit" class="btn btn-primary">
                Login
            </button>
            @if (!string.IsNullOrWhiteSpace(_errorMessage))
            {
                <div class="alert alert-danger my-2">
                    @_errorMessage
                </div>
            }
        </EditForm>
    </div>
</div>


@code {
    private LoginRequest _model = new();
    private string _errorMessage = string.Empty;

    private async Task SubmitLoginFormAsync()
    {
        try
        {
            var loginResult = await AuthService.LoginUserAsync(_model);
            // store the token in local storage
            await LocalStorage.SetItemAsync("access_token", loginResult.AccessToken);
            await AuthStateProvider.GetAuthenticationStateAsync();
            Navigation.NavigateTo("/"); // Redirect to home page after successful login
        }
        catch(ApiResponseException ex)
        {
            _errorMessage = ex.Message;
        }
        catch (Exception ex)
        {
            // Handle exceptions, e.g., show a message to the user
            Console.WriteLine($"Error during login: {ex.Message}");
        }
    }
}
